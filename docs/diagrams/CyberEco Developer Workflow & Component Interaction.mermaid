sequenceDiagram
    participant D as Developer
    participant CLI as Nx CLI
    participant T as Template App
    participant NA as New App
    participant P as Shared Packages
    participant FB as Firebase
    participant GH as GitHub Actions
    
    %% App Creation Process
    D->>CLI: nx generate app-generator --name=plantopia
    CLI->>T: Copy template structure
    CLI->>NA: Configure app-specific files
    CLI->>NA: Set up Firebase config
    CLI->>NA: Initialize package.json
    CLI->>D: Return new app scaffold
    
    %% Development Process
    D->>NA: Add app-specific features
    NA->>P: Import shared packages
    D->>CLI: nx serve plantopia
    CLI->>NA: Start development server
    NA->>FB: Connect to dev Firebase project
    FB->>NA: Auth and data responses
    
    %% Package Update Process
    D->>P: Update shared component
    D->>P: Bump version
    D->>CLI: nx affected:test
    CLI->>P: Run tests for affected libs
    CLI->>NA: Run tests for affected apps
    D->>GH: Push changes
    GH->>P: Run CI pipeline
    GH->>P: Publish package update
    
    %% Production Deployment
    D->>CLI: nx build plantopia --prod
    CLI->>NA: Build production bundle
    D->>GH: Merge to main branch
    GH->>NA: Trigger deployment pipeline
    GH->>FB: Deploy to Firebase Hosting
    FB->>NA: Deploy live
    
    %% Adding a New Feature to Core
    D->>P: Add feature to core package
    D->>CLI: nx test core
    CLI->>P: Run tests for core
    D->>NA: Import new feature
    D->>CLI: nx serve plantopia
    CLI->>NA: Start server with new feature
    NA->>FB: Interact with backend
    
    %% Feature Flag Management
    D->>P: Add feature flag to config
    P->>NA: Feature flag propagates
    D->>NA: Use feature flag condition
    NA->>FB: Conditional backend calls
    
    %% Working with Multiple Apps
    D->>CLI: nx run-many --target=serve --projects=plantopia,demos
    CLI->>NA: Start multiple dev servers
    
    %% Adding Shared Component
    D->>P: Create new UI component
    D->>CLI: nx generate ui-component
    CLI->>P: Scaffold component files
    D->>P: Implement component
    D->>NA: Import and use component
    
    note over D,FB: The monorepo architecture allows seamless sharing and updating of code across applications

    %% Authentication Flow
    rect rgb(240, 240, 255)
    note right of NA: Detailed Authentication Flow
    NA->>P: Use AuthProvider from core
    P->>FB: Firebase signInWithEmailAndPassword()
    FB->>P: Return JWT token
    P->>NA: Update auth context
    NA->>NA: Render authenticated UI
    end
    
    %% Data Operations Flow
    rect rgb(240, 255, 240)
    note right of NA: Detailed Data Operations Flow
    NA->>P: Call useCollection hook
    P->>FB: Query Firestore collection
    FB->>P: Return collection data
    P->>NA: Update local state
    NA->>NA: Render data components
    end
    
    %% Security Rules Updates
    rect rgb(255, 240, 240)
    note right of FB: Security Rules Management
    D->>P: Update security rules template
    P->>FB: Deploy updated rules
    FB->>FB: Apply rules to databases
    FB->>NA: Enforce data access restrictions
    end